'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var _ = require('../');

var _reactAddons = require('react/addons');

var _reactAddons2 = _interopRequireDefault(_reactAddons);

var _rx = require('rx');

var _jsdom = require('./jsdom');

var _jsdom2 = _interopRequireDefault(_jsdom);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var TestUtils = _reactAddons2['default'].addons.TestUtils;

function createSmartButton(render) {
  return _.createRxComponent(function (props$) {
    var increment$ = _.funcSubject();
    var count$ = increment$.startWith(0).scan(function (total) {
      return total + 1;
    });

    return _rx.Observable.combineLatest(props$, count$, function (props, count) {
      return _extends({}, props, {
        onClick: increment$,
        count: count
      });
    });
  }, render);
}

function testSmartButton(element) {
  var tree = TestUtils.renderIntoDocument(element);
  var button = TestUtils.findRenderedDOMComponentWithTag(tree, 'button');

  TestUtils.Simulate.click(button);
  TestUtils.Simulate.click(button);
  TestUtils.Simulate.click(button);

  expect(button.props.count).to.equal(3);
  expect(button.props.pass).to.equal('through');
}

describe('createRxComponent', function () {
  _jsdom2['default']();

  it('creates a smart React component by transforming a stream of props', function () {
    var SmartButton = createSmartButton(function (props) {
      return _reactAddons2['default'].createElement('button', props);
    });
    testSmartButton(_reactAddons2['default'].createElement(SmartButton, { pass: 'through' }));
  });

  it('does not render initial props twice', function () {
    var spy = _sinon2['default'].spy();
    var SmartButton = createSmartButton(function (props) {
      spy(props.count);
      return _reactAddons2['default'].createElement('button', props);
    });
    testSmartButton(_reactAddons2['default'].createElement(SmartButton, { pass: 'through' }));
    expect(spy.args.map(function (args) {
      return args[0];
    })).to.deep.equal([0, 1, 2, 3]);
  });

  it('works on initial render', function () {
    var SmartButton = createSmartButton(function (props) {
      return _reactAddons2['default'].createElement('button', props);
    });

    // Test using shallow renderer, which only renders once
    var renderer = TestUtils.createRenderer();
    renderer.render(_reactAddons2['default'].createElement(SmartButton, { pass: 'through' }));
    var button = renderer.getRenderOutput();
    expect(button.props.pass).to.equal('through');
    expect(button.props.count).to.equal(0);
  });

  it('can be passed a component class', function () {
    var SmartButton = createSmartButton((function (_React$Component) {
      var _class = function _class() {
        _classCallCheck(this, _class);

        _React$Component.apply(this, arguments);
      };

      _inherits(_class, _React$Component);

      _class.prototype.render = function render() {
        return _reactAddons2['default'].createElement('button', this.props);
      };

      return _class;
    })(_reactAddons2['default'].Component));

    testSmartButton(_reactAddons2['default'].createElement(SmartButton, { pass: 'through' }));
  });

  it('is curried so it can be used as a higher-order component', function () {
    var SmartButtonDecorator = createSmartButton();

    var Button = (function (_React$Component2) {
      function Button() {
        _classCallCheck(this, _Button);

        _React$Component2.apply(this, arguments);
      }

      _inherits(Button, _React$Component2);

      var _Button = Button;

      _Button.prototype.render = function render() {
        return _reactAddons2['default'].createElement('button', this.props);
      };

      Button = SmartButtonDecorator(Button) || Button;
      return Button;
    })(_reactAddons2['default'].Component);

    testSmartButton(_reactAddons2['default'].createElement(Button, { pass: 'through' }));
  });

  it('receives prop updates', function () {
    var SmartButton = createSmartButton(function (props) {
      return _reactAddons2['default'].createElement(
        'div',
        null,
        props.label
      );
    });

    var SmartButtonContainer = (function (_React$Component3) {
      function SmartButtonContainer() {
        _classCallCheck(this, SmartButtonContainer);

        _React$Component3.apply(this, arguments);

        this.state = { label: 'Count' };
      }

      _inherits(SmartButtonContainer, _React$Component3);

      SmartButtonContainer.prototype.render = function render() {
        return _reactAddons2['default'].createElement(SmartButton, { label: this.state.label });
      };

      return SmartButtonContainer;
    })(_reactAddons2['default'].Component);

    var container = TestUtils.renderIntoDocument(_reactAddons2['default'].createElement(SmartButtonContainer, null));
    var div = TestUtils.findRenderedDOMComponentWithTag(container, 'div');

    expect(div.props.children).to.equal('Count');
    container.setState({ label: 'Current count' });
    expect(div.props.children).to.equal('Current count');
  });

  it('receive context updates', function () {
    var SmartComponent = _.createRxComponent(function (props$, context$) {
      return _rx.Observable.combineLatest(props$, context$, function (props, context) {
        return _extends({}, props, context);
      });
    }, function (props) {
      return _reactAddons2['default'].createElement('div', props);
    });

    SmartComponent.contextTypes = { redux: _reactAddons.PropTypes.string };

    var ContextComponent = (function (_Component) {
      function ContextComponent() {
        _classCallCheck(this, ContextComponent);

        _Component.apply(this, arguments);

        this.state = { redux: 'redux' };
      }

      _inherits(ContextComponent, _Component);

      ContextComponent.prototype.getChildContext = function getChildContext() {
        return { redux: this.state.redux };
      };

      ContextComponent.prototype.render = function render() {
        return _reactAddons2['default'].createElement(SmartComponent, null);
      };

      _createClass(ContextComponent, null, [{
        key: 'childContextTypes',
        value: { redux: _reactAddons.PropTypes.string },
        enumerable: true
      }]);

      return ContextComponent;
    })(_reactAddons.Component);

    var container = TestUtils.renderIntoDocument(_reactAddons2['default'].createElement(ContextComponent, null));
    var div = TestUtils.findRenderedDOMComponentWithTag(container, 'div');

    expect(div.props.redux).to.equal('redux');
    container.setState({ redux: 'store' });
    expect(div.props.redux).to.equal('store');
  });
});