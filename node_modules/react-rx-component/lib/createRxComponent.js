'use strict';

exports.__esModule = true;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var _react = require('react');

var _reactPureRenderFunction = require('react-pure-render/function');

var _reactPureRenderFunction2 = _interopRequireDefault(_reactPureRenderFunction);

var _ = require('./');

function isReactComponent(c) {
  return c && c.prototype && typeof c.prototype.render === 'function';
}

function createRxComponent(mapProps, renderOrComponent) {
  var _render = isReactComponent(renderOrComponent) ? function (props) {
    return _react.createElement(renderOrComponent, props);
  } : renderOrComponent;

  return (function (_Component) {
    var _class = function _class(props, context) {
      var _this = this;

      _classCallCheck(this, _class);

      _Component.call(this, props, context);

      this.shouldComponentUpdate = _reactPureRenderFunction2['default'];
      // Used to receive props and context from owner
      this.receive$ = _.funcSubject();

      this.props$ = this.receive$.map(function (x) {
        return x[0];
      }).startWith(props);
      this.context$ = this.receive$.map(function (x) {
        return x[1];
      }).startWith(context);

      // Sequence of child props
      this.childProps$ = mapProps(this.props$, this.context$);

      // Keep track of whether the component has mounted
      this.componentHasMounted = false;

      // Subscribe to child prop changes so we know when to re-render
      this.subscription = this.childProps$.subscribe(function (childProps) {
        return !_this.componentHasMounted ? _this.state = childProps : _this.setState(childProps);
      });
    };

    _inherits(_class, _Component);

    _class.prototype.componentDidMount = function componentDidMount() {
      this.componentHasMounted = true;
    };

    _class.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps, nextContext) {
      // Receive new props and context from the owner
      this.receive$([nextProps, nextContext]);
    };

    _class.prototype.componentWillUnmount = function componentWillUnmount() {
      // Clean-up subscription before un-mounting
      this.subscription.dispose();
    };

    _class.prototype.render = function render() {
      var childProps = this.state;
      return _render(childProps);
    };

    return _class;
  })(_react.Component);
}

// Stupidly basic curry function
function curry(func) {
  return function (a, b) {
    return typeof b === 'undefined' ? function (c) {
      return func(a, c);
    } : func(a, b);
  };
}

exports['default'] = curry(createRxComponent);
module.exports = exports['default'];